knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(lubridate)
my_duration <- dhours(2) + dminutes(30)
my_duration
# install.packages("devtools")
devtools::install_github("hadley/emo")
library(emo)
my_date <- ymd("2023-10-25")
my_date
class(my_date)
# Parse a date in the format "2023-10-26"
ymd("2023-10-26")
# Parse a date and time in the format "2023-10-26 15:47:56"
ymd_hms("2023-10-26 15:47:56")
# Parse a date in the format "26/10/2023"
dmy("26/10/2023")
# Parse a date and time in the format "10/26/2023 15:47:56"
mdy_hms("10/26/2023 15:47:56")
# Get the year of a date
year(ymd("2023-10-26"))
# Get the month of a date
month(ymd("2023-10-26"))
# Get the day of the month of a date
mday(ymd("2023-10-26"))
# Get the hour of a date and time
hour(ymd_hms("2023-10-26 15:47:56"))
# Get the minute of a date and time
minute(ymd_hms("2023-10-26 15:47:56"))
# Get the second of a date and time
second(ymd_hms("2023-10-26 15:47:56"))
### Working with time spans
# Create an interval
interval(ymd("2023-10-26"), ymd("2023-10-28"))
# Create a duration
duration(days(2))
# Create a duration
as.duration(days(2))
# Create a period
period(days(2))
# Perform arithmetic operations on time spans
interval(ymd("2023-10-26"), ymd("2023-10-28")) + days(1)
# Perform arithmetic operations on time spans
interval(ymd("2023-10-26"), ymd("2023-10-28")) + days(1) duration(days(2)) - duration(days(1))
# Perform arithmetic operations on time spans
interval(ymd("2023-10-26"), ymd("2023-10-28")) + days(1) duration(days(2)) - duratio(days(1))
# Perform arithmetic operations on time spans
interval(ymd("2023-10-26"), ymd("2023-10-28")) + days(1) duration(days(2)) - duration(days(1))
# Perform arithmetic operations on time spans
interval(ymd("2023-10-26"), ymd("2023-10-28")) + days(1) duration(days(2)) - duration(days(1))
# Create a duration
duration(days(2))
# Create a duration
as.duration(days(2))
# Multiply the duration by 3
duration(days(2)) * 3
# Multiply the duration by 3
duration * 3
duration
# Create a duration
duration(days(2))
# Convert an Interval object to a Duration object
as.duration(interval(ymd("2023-10-26"), ymd("2023-10-28")))
# Convert a Period object to a Duration object
as.duration(period(days(2)))
# Create a new Duration object with the specified values
duration(days(2), hours(1))
# Create a new Duration object with the specified values
as.duration(days(2), hours(1))
### Working with time spans
# Define two date-time objects
start_datetime <- ymd_hms("2023-10-25 08:00:00")
end_datetime <- ymd_hms("2023-10-26 14:30:00")
# Calculate the time span between two date-time objects
time_span <- interval(start_datetime, end_datetime)
# Display the time span
print(time_span)
# Calculate the time span between two date-time objects
time_span <- interval(start_datetime - end_datetime)
# Creating a Date object
date_obj <- ymd("2023-10-26")
# Extracting components
year(date_obj)  # Returns the year (e.g., 2023)
month(date_obj) # Returns the month (e.g., 10)
day(date_obj)   # Returns the day (e.g., 26)
class(date_obj)
# Creating a Date object
date_obj <- ymd("2023-10-26")
class(date_obj)
# Extracting components
year(date_obj)  # Returns the year (e.g., 2023)
month(date_obj) # Returns the month (e.g., 10)
day(date_obj)   # Returns the day (e.g., 26)
datetime_obj <- ymd_hms("2023-10-26 14:30:00")
# Extracting components
year(datetime_obj)    # Returns the year (e.g., 2023)
month(datetime_obj)   # Returns the month (e.g., 10)
day(datetime_obj)     # Returns the day (e.g., 26)
hour(datetime_obj)    # Returns the hour (e.g., 14)
minute(datetime_obj)  # Returns the minute (e.g., 30)
second(datetime_obj)  # Returns the second (e.g., 0)
tz(datetime_obj)      # Returns the time zone (e.g., "UTC")
datetime_obj <- ymd_hms("2023-10-26 14:30:00")
class(datetime_obj)
# Extracting components
year(datetime_obj)    # Returns the year (e.g., 2023)
month(datetime_obj)   # Returns the month (e.g., 10)
day(datetime_obj)     # Returns the day (e.g., 26)
hour(datetime_obj)    # Returns the hour (e.g., 14)
minute(datetime_obj)  # Returns the minute (e.g., 30)
second(datetime_obj)  # Returns the second (e.g., 0)
tz(datetime_obj)      # Returns the time zone (e.g., "UTC")
today()
today <- today()
class(today)
#### Parsing dates and times
# Parse a date in the format "2023-10-26"
ymd("2023-10-26")
# Parse a date and time in the format "2023-10-26 15:47:56"
ymd_hms("2023-10-26 15:47:56")
# Parse a date in the format "26/10/2023"
dmy("26/10/2023")
# Parse a date and time in the format "10/26/2023 15:47:56"
mdy_hms("10/26/2023 15:47:56")
#### Parsing dates and times
# Parse a date in the format "2023-10-26"
ymd("2023-10-26")
ymd (20231026)
ymd(2023-10-26)
ymd("2023/10/26")
#### Parsing dates and times
# Parse a date in the format "2023-10-26"
ymd("2023-10-26")
ymd (20231026)
ymd("2023/10/26")
# Parse a date in the format "26/10/2023"
dmy("2023-10-26")
dmy (20231026)
# Parse a date in the format "26/10/2023"
dmy("26-10-2023")
dmy (2610203)
dmy ("2610203")
dmy (26102023)
# Parse a date in the format "26/10/2023"
dmy("26-10-2023")
# Parse a date in the format "26/10/2023"
dmy("26/10/2023")
# Parse a date in the format "26/10/2023"
as_date("26/10/2023")
# Parse a date in the format "26/10/2023"
as_date("26 october 2023")
# Parse a date in the format "26/10/2023"
dmy("26/10/2023")
# Parse a date and time in the format "10/26/2023 15:47:56"
mdy_hms("10/26/2023 15:47:56")
ymd("2023-10-26")
mdy("10/26/2023")
dmy("26/10/2023")
#### Parsing dates
ymd("2023-10-26")
mdy("10/26/2023")
dmy("26/10/2023")
ymd(230126)
mdy(10262023)
ymd("23.01.26")
ymd("2023 October 26")
dmy("26 Ocober 2023")
mdy("October 10 2023")
mdy(10262023)
dmy("26 October 2023")
dmy(26102023)
#### Parsing dates
ymd("2023-10-26")
ymd("23.01.26")
ymd("2023 October 26")
ymd(230126)
mdy("10/26/2023")
mdy("10.26.2023")
mdy("October 26 2023")
mdy(10262023)
dmy("26/10/2023")
dmy("26.10.2023")
dmy("26 October 2023")
dmy(26102023)
#### Parsing dates
ymd("2023-10-26")
ymd("23.01.26")
ymd("2023 October 26")
mdy("10/26/2023")
mdy("10.26.2023")
mdy("October 26 2023")
dmy("26/10/2023")
dmy("26.10.2023")
dmy("26 October 2023")
# Parsing dates and times
datetime1 <- ymd_hms("2023-10-26 14:30:00")
# Parsing dates and times
ymd_hms("2023-10-26 14:30:00")
dmy_hms("26/10/2023 14:30:00")
# Parsing dates and times
ymd_hms("2023-10-26 14:30:00")
mdy_hm("10/26/2023 14:30")
dmy_hms("26/10/2023 14:30:00")
parsed_datetime <- parse_date_time(date_string, orders = format)
# Parsing Custom Date-Time Strings
date_string <- "2023-10-26 14:30:00"
format <- "%Y-%m-%d %H:%M:%S"
parsed_datetime <- parse_date_time(date_string, orders = format)
parsed_datetime
# Parsing Custom Date-Time Strings
date_string <- "2023-10-26 14:30:00"
format <- "%Y-%m-%d %H:%M:%S"
parse_date_time(date_string, orders = format)
# Parsing Custom Date-Time Strings
date_string <- "2023-10-26 14:30:00"
date_string2 <- "2023.10.26 14.30.00"
format1 <- "%Y-%m-%d %H:%M:%S"
parse_date_time(date_string, orders = format)
parse_date_time(date_string, orders = format)
parse_date_time(date_string2, orders = format)
# Parsing Custom Date-Time Strings
date_string <- "2023-10-26 14:30:00"
format1 <- "%Y-%m-%d %H:%M:%S"
parse_date_time(date_string, orders = format)
date_string2 <- "2023.10.26 14.30.00"
parse_date_time(date_string2, orders = format)
# Parsing Date-Time with Time Zones:
date_tz <- dmy_hm_tz("26/10/2023 14:30", tz = "America/New_York")
# Parsing Date-Time with Time Zones:
datetime_with_tz <- with_tz(dmy_hm("26/10/2023 14:30"), tzone = "America/New_York")
# Parsing Date-Time with Time Zones:
with_tz(dmy_hm("26/10/2023 14:30"), tzone = "America/New_York")
# Parsing Date-Time with Time Zones:
with_tz(dmy_hm(date_string2), tzone = "America/New_York")
date_string2 <- "2023.10.26 14.30.00"
dmy_hm(date_string2)
@2. # Creating a POSIXct object
# Time Zones
# Get the current time in UTC
with_tz(now(), "UTC")
# Handle Time Zones
# Get the current time in UTC
with_tz(now(), "UTC")
# Get the current time in Pacific Standard Time (PST)
with_tz(now(), "America/Los_Angeles")
# Change the time zone of the current time to UTC
force_tz(now(), "UTC")
# Create a date and time object in UTC
ymd_hms("2023-10-26 15:47:56 UTC")
# Change the time zone of the date and time object to PST
force_tz(ymd_hms("2023-10-26 15:47:56 UTC"), "America/Los_Angeles")
now()
# Handle Time Zones
# The date and time rigth now
now()
# Handle Time Zones
# Get the date and time rigth now
now()
# Handle Time Zones
# Get the date and time rigth now
now()
# Get the current time in UTC
with_tz(now(), "UTC")
# Get the current time in Pacific Standard Time (PST)
with_tz(now(), "America/Los_Angeles")
# Change the time zone of the current time to UTC
force_tz(now(), "UTC")
# Create a date and time object in UTC
ymd_hms("2023-10-26 15:47:56 UTC")
# Change the time zone of the date and time object to PST
force_tz(ymd_hms("2023-10-26 15:47:56 UTC"), "America/Los_Angeles")
# Handle Time Zones
# Get the date and time rigth now
today <- now()
# Get the current time in UTC
with_tz(today, "UTC")
# Handle Time Zones
# Get the date and time rigth now
today <- now()
# Get the current time in UTC
with_tz(today, "UTC")
# Get the current time in Pacific Standard Time (PST)
with_tz(today, "America/Los_Angeles")
# Change the time zone of the current time to UTC
force_tz(today, "UTC")
# Create a date and time object in UTC
ymd_hms("2023-10-26 15:47:56 UTC")
# Change the time zone of the date and time object to PST
force_tz(ymd_hms("2023-10-26 15:47:56 UTC"), "America/Los_Angeles")
# Handle Time Zones
# Get the date and time rigth now
time <- now()
time
# Handle Time Zones
# Get the date and time rigth now
time <- now()
time
# Changes printing
with_tz(time, "America/Chicago")
# Changes time
force_tz(time, "America/Chicago")
# 1. Creating a Date object
date_obj <- ymd("2023-10-26")
class(date_obj)
# Extracting components
year(date_obj)  # Returns the year (e.g., 2023)
month(date_obj) # Returns the month (e.g., 10)
day(date_obj)   # Returns the day (e.g., 26)
# Handle Time Zones
# Get the date and time rigth now
time <- now()
time
# Display the current time in America/Chicago Time (CDT)
with_tz(time, "America/Chicago")
# Force the current time to America/Chicago Time (CDT)
force_tz(time, "America/Chicago")
### Durations, Periods and Intervals
# Create a Duration object representing 2 days
duration(days(2))
### Durations, Periods and Intervals
# Create a Duration object representing 3 hours and 30 minutes
duration(hours(3) + minutes(30))
### Durations, Periods and Intervals
# Create a Duration object representing 3 hours and 30 minutes
duration(hours(3) + minutes(30))
### Durations, Periods and Intervals
# Create a Duration object representing 3 hours and 30 minutes
duration(hours(3) + minutes(30))
### Durations, Periods and Intervals
# Create a Duration object from a string
duration("03:30:00")
### Durations, Periods and Intervals
# Create a Duration object representing the start time of the meeting
meeting_start <- ymd_hms("2023-10-27 10:00:00")
# Create a Duration object representing the end time of the meeting
meeting_end <- ymd_hms("2023-10-27 11:30:00")
# Calculate the total duration of the meeting
meeting_duration <- meeting_end - meeting_start
# Calculate the total duration of the meeting
meeting_duration <- meeting_end - meeting_start
meeting_duration
### Durations, Periods and Intervals
# Create a Duration object representing the start time of the meeting
meeting_start <- ymd_hms("2023-10-27 10:00:00")
# Create a Duration object representing the end time of the meeting
meeting_end <- ymd_hms("2023-10-27 11:30:00")
# Calculate the total duration of the meeting
meeting_duration <- meeting_end - meeting_start
meeting_duration
### Durations, Periods and Intervals
dur <- duration(hours = 2, minutes = 30, seconds = 45)
dur
### Durations, Periods and Intervals
# Duration
duration(hours = 2, minutes = 30, seconds = 45)
# Duration
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
# Adding a duration to a date-time object
start_time <- ymd_hms("2023-10-26 08:00:00")
end_time <- start_time + dur
end_time
# Durations
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
# Adding a duration to a date-time object
start_time <- ymd_hms("2023-10-26 08:00:00")
end_time <- start_time + dur
end_time
dur
# Durations
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
dur
# Adding a duration to a date-time object
start_time <- ymd_hms("2023-10-26 08:00:00")
end_time <- start_time + dur
end_time
# Periods
# Creating a period of 2 years, 5 months, and 15 days
per <- period(years = 2, months = 5, days = 15)
# Adding a period to a date-time object
start_date <- ymd("2023-01-01")
end_date <- start_date + per
# Periods
# Creating a period of 2 years, 5 months, and 15 days
per <- period(years = 2, months = 5, days = 15)
per
# Adding a period to a date-time object
start_date <- ymd("2023-01-01")
end_date <- start_date + per
end_date
# Intervals
# Creating an interval between two date-time objects
start_datetime <- ymd_hms("2023-10-26 08:00:00")
end_datetime <- ymd_hms("2023-10-26 14:30:00")
time_span <- interval(start_datetime, end_datetime)
time_span
# Extracting information from the interval
int_start <- start(time_span)
int_start
int_end <- end(time_span)
int_end
# Extracting information from the interval
int_start <- start(time_span)
int_start
int_end <- end(time_span)
int_end
# Intervals
# Creating an interval between two date-time objects
start_datetime <- ymd_hms("2023-10-26 08:00:00")
end_datetime <- ymd_hms("2023-10-26 14:30:00")
time_span <- interval(start_datetime, end_datetime)
time_span
# Intervals
# Creating an interval between two date-time objects
start_datetime <- ymd_hms("2023-10-26 08:00:00")
end_datetime <- ymd_hms("2023-10-26 14:30:00")
time_span <- interval(start_datetime, end_datetime)
time_span
end_time
dminutes(end_time)
dminutes(dur)
# Durations
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
dur
dminutes(dur)
dur
# Durations
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
dur
# Change to munutes
dhours(dur)
# Change to munutes
dminutes(dur)
# Durations
# Creating a duration of 2 hours, 30 minutes, and 45 seconds
dur <- duration(hours = 2, minutes = 30, seconds = 45)
dur
dminutes(dur)
duration1 <- dhours(2)
duration2 <- dminutes(30)
result_duration <- duration1 + duration2
result_duration
duration1 <- dhours(2)
duration2 <- dminutes(30)
result_duration <- duration1 + duration2
result_duration
# Parsing duratons
duration_example <- dhours(2) + dminutes(30)
period_example <- months(2) + days(15)
Using Time Spans in Calculations:
# Parsing duratons
duration_example <- dhours(2) + dminutes(30)
period_example <- months(2) + days(15)
# Parsing duratons
duration_example <- dhours(2) + dminutes(30)
duration_example
period_example <- months(2) + days(15)
period_example
